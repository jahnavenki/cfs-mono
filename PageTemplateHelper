package au.com.cfs.winged.helpers;


import com.day.cq.search.PredicateGroup;
import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import com.day.cq.wcm.api.Page;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.RepositoryException;
import javax.jcr.Session;
import java.util.HashMap;
import java.util.Map;

@Component(name = "CFS PageTemplate Helper", service = PageTemplateHelper.class, immediate = true)
public class PageTemplateHelper {

  private static final Logger LOGGER = LoggerFactory.getLogger(PageTemplateHelper.class);

    private static final String ROBOTS_PAGE_PATH = "/content/cfs-winged/au/en/robots";


    private QueryBuilder queryBuilder;

  @Reference
  public void bindQueryBuilder(QueryBuilder queryBuilder) {
    this.queryBuilder = queryBuilder;
  }

  public void unbindQueryBuilder(QueryBuilder queryBuilder) {
    this.queryBuilder = queryBuilder;
  }

  public String getTemplateContent(SlingHttpServletRequest request,String templateName) {
    try {
      ResourceResolver resourceResolver = request.getResourceResolver();
      Query query = getQuery(resourceResolver,templateName);
      return getRobotsContent(query);
    } catch (RepositoryException e) {
      LOGGER.error("ERROR: " + e.getMessage());
    }
    return null;
  }

  public Query getQuery(ResourceResolver resolver,String templateName){
    final Map<String, String> map = new HashMap<String, String>();

    map.put("type", "cq:Page");
    map.put("path", "/content/cfs-winged/au/en");
    map.put("property", "jcr:content/cq:template");
    map.put("property.1_value", "/conf/cfs-winged/settings/wcm/templates/" + templateName);

    return queryBuilder.createQuery(PredicateGroup.create(map), resolver.adaptTo(Session.class));
  }

    public String getRobotsContent(SlingHttpServletRequest request) {
        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource robotsPageResource = resourceResolver.getResource(ROBOTS_PAGE_PATH);
            if(robotsPageResource != null){
                Page robotsPage = robotsPageResource.adaptTo(Page.class);
                if (robotsPage != null) {
                    Resource contentResource = robotsPage.getContentResource();
                    ValueMap map = contentResource.getValueMap();
                    String content = map.get("content", String.class);
                    LOGGER.debug("Content: " + content);
                    if(StringUtils.isNotBlank(content)){
                        return content;
                    }
                }
            }

        } catch (Exception e) {
            LOGGER.error("ERROR: " + e.getMessage());
        }
        return null;
    }

  private String getRobotsContent(Query query) throws RepositoryException {
    Resource resource = null;
    if(query != null){
      query.setHitsPerPage(1);
      SearchResult results = query.getResult();
      LOGGER.debug("Query: " + results.getQueryStatement());
      LOGGER.debug("Total: " + results.getTotalMatches());

      for (Hit hit : results.getHits()) {
        if (resource == null) {
          resource = hit.getResource();
        }
      }
    }

    if(resource != null){
      Page page = resource.adaptTo(Page.class);
      if (page != null) {
        Resource contentResource = page.getContentResource();
        ValueMap map = contentResource.getValueMap();
        String content = map.get("content", String.class);
        LOGGER.debug("Content: " + content);
        if(StringUtils.isNotBlank(content)){
          return content;
        }
      }
    }
    return  null;
  }
}

